---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cleanup
  namespace: {{ .Release.Namespace }}
spec:
  schedule: {{ .Values.cleanup_schedule | quote }}
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}

        spec:
          restartPolicy: Never
          containers:
          - name: cleanup
            image: {{ .Values.main_image }}
            imagePullPolicy: {{ .Values.main_pull_policy }}
            command: ["python", "cleanup.py"]
            envFrom:
            {{- if .Values.storage }}
              - secretRef:
                  name: storage-auth
            {{- end }}

              - configMapRef:
                  name: {{ .Values.name }}-env-config

            resources:
              limits:
                cpu: {{ .Values.cleanup_limit_cpu }}

              requests:
                cpu: {{ .Values.cleanup_requests_cpu }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.name }}
  replicas: {{ .Values.num_backend_replicas }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}

      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}

    spec:
      volumes:
        - name: data-config
          configMap:
            name: data-config
            items:
              - key: job-env.yaml
                path: job-env.yaml

{{- if or .Values.enable_vnc .Values.remote_cdp }}
              - key: nginx.conf
                path: nginx.conf

        - name: nginx-resolver
          emptyDir: {}

      initContainers:
        - name: nginx-init
          image: {{ .Values.nginx_image }}
          command: ["/bin/sh"]
          args: ["-c", "echo resolver $(awk 'BEGIN{ORS=\" \"} $1==\"nameserver\" {print $2}' /etc/resolv.conf) \";\" > /etc/nginx/resolvers/resolvers.conf"]
          volumeMounts:
            - name: nginx-resolver
              mountPath: /etc/nginx/resolvers/
{{- end }}
      containers:
{{- if or .Values.enable_vnc .Values.remote_cdp }}
        - name: nginx
          image: {{ .Values.nginx_image }}
          imagePullPolicy: {{ .Values.nginx_pull_policy }}
          volumeMounts:
            - name: data-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true

            - name: nginx-resolver
              mountPath: /etc/nginx/resolvers/
              readOnly: true

          resources:
            limits:
              cpu: {{ .Values.nginx_limit_cpu }}

            requests:
              cpu: {{ .Values.nginx_requests_cpu }}
{{- end }}
        - name: main
          image: {{ .Values.main_image }}
          imagePullPolicy: {{ .Values.main_pull_policy }}
          envFrom:
            - configMapRef:
                name: {{ .Values.name }}-env-config

          {{- if .Values.storage }}
            - secretRef:
                name: storage-auth
          {{- end }}

          volumeMounts:
            - name: data-config
              mountPath: /tmp/job-env.yaml
              subPath: job-env.yaml
              readOnly: true

          resources:
            limits:
              cpu: {{ .Values.main_limit_cpu }}

            requests:
              cpu: {{ .Values.main_requests_cpu }}


---

apiVersion: v1
kind: Service

metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}

{{- if .Values.service }}
  {{- if .Values.service.annotations }}
  annotations:
  {{- range $key, $val := .Values.service.annotations }}
    {{ $key }}: {{ $val | quote }}
  {{- end }}
  {{- end }}
{{- end }}

spec:
  selector:
    app: {{ .Values.name }}

{{- if .Values.service }}
  {{- if .Values.service.type }}
  type: {{ .Values.service.type | quote }}
  {{- end }}
{{- end }}

  ports:
    - protocol: TCP
      port: 80
      name: main
