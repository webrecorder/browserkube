name: browserkube

#
# Images
#

main_image: "webrecorder/browserkube-main"
driver_image: ""
browser_image_template: "oldwebtoday/{0}"
browser_image: "chrome:84"
pywb_image: "webrecorder/browserkube-pywb"
xvfb_image: "webrecorder/browserkube-xvfb"
vnc_image: "oldwebtoday/remote-desktop-server:dev"
nginx_image: "nginx"
profile_image: "minio/mc:RELEASE.2020-11-25T23-04-07Z"

main_pull_policy: "Always"
driver_pull_policy: "Always"
browser_pull_policy: "Always"
pywb_pull_policy: "Always"
xvfb_pull_policy: "Always"
vnc_pull_policy: "Always"
nginx_pull_policy: "IfNotPresent"
profile_pull_policy: "Always"

#
# Resource Limits
#

main_limit_cpu: "100m"
main_requests_cpu: "25m"

cleanup_limit_cpu: "100m"
cleanup_requests_cpu: "25m"

nginx_limit_cpu: "100m"
nginx_requests_cpu: "25m"

#
# Storage
#

enable_minio: True
minio:
  fullnameOverride: minio
  accessKey: "YOURACCESSKEY"
  secretKey: "YOURSECRETKEY"
  buckets:
    - name: "browserkube"
      policy: none
      purge: True

storage:
  access_key: "YOURACCESSKEY"
  secret_key: "YOURSECRETKEY"
  # api_endpoint can be "" if using AWS S3, otherwise, set to your provider's S3 endpoint
  api_endpoint: "http://minio.default.svc.cluster.local:9000"
  # if your provider requires path-style URLs for S3 objects, set force_path_style to "true" (any truthy string)
  # https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html
  force_path_style: "true"
  # the target bucket's name and desired storage subpath, formatted as an s3:// URL for convenience
  # (the protocol is ignored; the bucket == the netloc; the subpath == the rest)
  storage_prefix: "http://browserkube/archives/"
  # acl settings for uploaded files, if any.
  # for example, to enable uploaded files to be public, set to:
  # acl: "public-read"
  # https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl
  acl: ""


#
# Main application pod/s config
#

num_backend_replicas: 2


#
# Cleanup pod/s config
#

cleanup_schedule: "*/30 * * * *"
# duration of storage artifacts left in block storage
job_cleanup_interval: "240"


#
# Browser pod/s config
#

browser_namespace: "browsers"
browser_mode: "headless"
enable_vnc: False
remote_cdp: False

# max duration of each job in minutes
# if not finished by this time, will be stopped and considered failed
job_max_duration: "10"

# idle timeout for reconnection when using VNC
idle_timeout: ""

# s3-like endpoint to load browser profiles from
profile_storage:
  access_key: "YOURACCESSKEY"
  secret_key: "YOURSECRETKEY"
  protocol: "http"
  api_netloc: "minio.default.svc.cluster.local:9000"

# a list of browser profiles to use when capturing specific URLs.
# for each profile, specify:
# "match": a regex to match against the full target URL
# "url": the bucket and full path from which to retrieve the profile, using `profile_storage.api_netloc`
profile_urls: []
# example:
# profile_urls:
#   - match: "^https?://twitter.com/.*"
#     url: 'browserkube/profiles/profile.tar.gz'


#
# Deployment options
#

# Optional: if 'host' is set, a publicly accessible Ingress controller is created with an SSL cert (using letsencrypt)
ingress:
  host: ""
  cert_email: "my-email-for-letsencrypt@example.com"

# Optional: configure load balancing
# service:
#   annotations:
#     service.beta.kubernetes.io/aws-load-balancer-internal: "true"
#     helm.sh/resource-policy: keep
#   type: LoadBalancer
